(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["stripe-payment"],{

/***/ "/TfR":
/*!******************************************************************************************************************************************************!*\
  !*** /home/felix/PhpstormProjects/shopware-6/plugins/ShopwareStripePayment/src/Resources/storefront/card-selection/stripe-payment.card-selection.js ***!
  \******************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return StripePaymentCardSelection; });\n/* harmony import */ var src_script_service_http_client_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/script/service/http-client.service */ \"k8s9\");\n/* harmony import */ var src_script_plugin_system_plugin_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/script/plugin-system/plugin.class */ \"FGIj\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\n\n\n\nvar StripePaymentCardSelection =\n/*#__PURE__*/\nfunction (_Plugin) {\n  _inherits(StripePaymentCardSelection, _Plugin);\n\n  function StripePaymentCardSelection() {\n    _classCallCheck(this, StripePaymentCardSelection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripePaymentCardSelection).apply(this, arguments));\n  }\n\n  _createClass(StripePaymentCardSelection, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      this._client = new src_script_service_http_client_service__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.accessKey, window.contextToken);\n      this.stripeElements = [];\n      this.invalidFields = [];\n      this.options = _extends(StripePaymentCardSelection.options, this.options || {});\n      /* eslint-disable no-undef */\n\n      this.stripeClient = Stripe(this.options.stripePublicKey); // Save config\n\n      this.setSelectedCard(this.options.selectedCard); // Setup form on payment method changes\n\n      var paymentMethodElements = document.querySelectorAll('input.payment-method-input');\n      paymentMethodElements.forEach(function (element) {\n        element.addEventListener('change', function () {\n          _this.setupForm();\n        });\n      });\n      this.setupForm();\n    }\n    /**\n     * Saves the given card and removes all hidden Stripe fields from the form. If the card exists, its ID as well as\n     * its encoded data are added to the form as hidden fields.\n     *\n     * @param card A Stripe card object.\n     */\n\n  }, {\n    key: \"setSelectedCard\",\n    value: function setSelectedCard(card) {\n      this.selectedCard = card;\n\n      if (this.selectedCard) {\n        this.selectedCardChanged = true;\n      }\n    }\n    /**\n     * Sets up the payment form by first unounting all Stripe elements that might be already mounted to the DOM and\n     * clearing all validation errors. Then, if a stripe card payment method is selected, mounts new Stripe Elements\n     * fields to the form and adds some observers to other fields as well as the form.\n     */\n\n  }, {\n    key: \"setupForm\",\n    value: function setupForm() {\n      // Reset form\n      this.unmountStripeElements();\n      this.invalidFields = [];\n      this.updateValidationErrors();\n\n      if (this.getActiveStripeCardForm()) {\n        this.getStripeCardForm().show(); // Mount Stripe form fields again to the now active form and add other observers\n\n        this.mountStripeElements();\n        this.observeForm(); // Make sure the card selection matches the internal state\n\n        if (this.selectedCard) {\n          this.formEl('.stripe-saved-cards').val(this.selectedCard.id);\n        }\n\n        this.formEl('.stripe-saved-cards').trigger('change');\n      } else {\n        this.removeFormListeners();\n        this.getStripeCardForm().hide();\n      }\n    }\n    /**\n     * Creates the Stripe Elements fields for card number, expiry and CVC and mounts them to their resepctive nodes in\n     * the active Stripe card payment form.\n     */\n\n  }, {\n    key: \"mountStripeElements\",\n    value: function mountStripeElements() {\n      // Define options to apply to all fields when creating them\n      var cardHolderFieldEl = this.formEl('.stripe-card-holder');\n      var defaultOptions = {\n        style: {\n          base: {\n            color: cardHolderFieldEl.css('color'),\n            fontFamily: cardHolderFieldEl.css('font-family'),\n            fontSize: cardHolderFieldEl.css('font-size'),\n            fontWeight: cardHolderFieldEl.css('font-weight'),\n            lineHeight: cardHolderFieldEl.css('line-height')\n          }\n        }\n      }; // Define a closure to create all elements using the same 'Elements' instance\n\n      var elements = this.stripeClient.elements();\n      var me = this;\n\n      var createAndMountStripeElement = function createAndMountStripeElement(type, mountSelector) {\n        // Create the element and add the change listener\n        var element = elements.create(type, defaultOptions);\n        element.on('change', function (event) {\n          if (event.error && event.error.type === 'validation_error') {\n            me.markFieldInvalid(type, event.error.code, event.error.message);\n            $(mountSelector).addClass('is-invalid');\n          } else {\n            me.markFieldValid(type);\n            $(mountSelector).removeClass('is-invalid');\n          }\n        }); // Mount it to the DOM\n\n        var mountElement = me.formEl(mountSelector).get(0);\n        element.mount(mountElement);\n        return element;\n      }; // Create all elements\n\n\n      this.stripeElements = [createAndMountStripeElement('cardNumber', '.stripe-element-card-number'), createAndMountStripeElement('cardExpiry', '.stripe-element-card-expiry'), createAndMountStripeElement('cardCvc', '.stripe-element-card-cvc')];\n    }\n    /**\n     * Unmounts all existing Stripe elements from the Stripe card payment form they are currently mounted to.\n     */\n\n  }, {\n    key: \"unmountStripeElements\",\n    value: function unmountStripeElements() {\n      this.stripeElements.forEach(function (element) {\n        return element.unmount();\n      });\n      this.stripeElements = [];\n    }\n    /**\n     * Checks the list of invalid fields for any entries and, if found, joins them to an error message, which is then\n     * displayed in the error box. If no invalid fields are found, the error box is hidden.\n     */\n\n  }, {\n    key: \"updateValidationErrors\",\n    value: function updateValidationErrors() {\n      var _this2 = this;\n\n      var errorBox = this.formEl('.stripe-payment-validation-error-box');\n      var boxContent = errorBox.find('.alert-content');\n      boxContent.empty();\n\n      if (Object.keys(this.invalidFields).length > 0) {\n        // Update the error box message and make it visible\n        var listEl = $('<ul></ul>').addClass('alert-list').appendTo(boxContent);\n        Object.keys(this.invalidFields).forEach(function (key) {\n          $('<li></li>').text(_this2.invalidFields[key]).appendTo(listEl);\n        });\n        errorBox.show();\n      } else {\n        errorBox.hide();\n      }\n    }\n    /**\n     * Adds change listeners to the card selection and card holder field as well as a submission listener on the main\n     * payment form.\n     */\n\n  }, {\n    key: \"observeForm\",\n    value: function observeForm() {\n      // Add listeners\n      this.findForm().on('submit', {\n        scope: this\n      }, this.onFormSubmission);\n      this.formEl('.stripe-saved-cards').on('change', {\n        scope: this\n      }, this.onCardSelectionChange); // Save the current value and add listener\n\n      var cardHolderElem = this.formEl('.stripe-card-holder');\n      cardHolderElem.data('oldVal', cardHolderElem.val());\n      cardHolderElem.on('propertychange keyup input paste', {\n        scope: this\n      }, this.onCardHolderChange);\n    }\n  }, {\n    key: \"removeFormListeners\",\n    value: function removeFormListeners() {\n      this.findForm().off('submit', this.onFormSubmission);\n      this.formEl('.stripe-saved-cards').off('change', this.onCardSelectionChange);\n      this.formEl('.stripe-card-holder').off('propertychange keyup input paste', this.onCardHolderChange);\n    }\n    /**\n     * Removes all validation errors for the field with the given 'fieldId' and triggers an update of the displayed\n     * validation errors.\n     *\n     * @param String fieldId\n     */\n\n  }, {\n    key: \"markFieldValid\",\n    value: function markFieldValid(fieldId) {\n      delete this.invalidFields[fieldId];\n      this.updateValidationErrors();\n    }\n    /**\n     * Determines the error message based on the given 'errorCode' and 'message' and triggers\n     * an update of the displayed validation errors.\n     *\n     * @param fieldId\n     * @param errorCode (optional) The code used to find a localised error message.\n     * @param message (optioanl) The fallback error message used in case no 'errorCode' is provided or no respective, localised description exists.\n     */\n\n  }, {\n    key: \"markFieldInvalid\",\n    value: function markFieldInvalid(fieldId, errorCode, message) {\n      // TODO: add localized error with snippets if avail\n      this.invalidFields[fieldId] = message || 'Unknown error';\n      this.updateValidationErrors();\n    }\n    /**\n     * First validates the form and payment state and, if the main form can be submitted, does nothing further.\n     * If however the main form cannot be submitted, because no card is selected (or no token was created), a new Stripe\n     * card and token are generated using the entered card data and saved in the form, before the submission is\n     * triggered again.\n     *\n     * @param event\n     */\n\n  }, {\n    key: \"onFormSubmission\",\n    value: function onFormSubmission(event) {\n      var me = event.data.scope;\n      var form = $(this); // Not the currently selected payment method\n\n      if (!me.getActiveStripeCardForm()) {\n        return undefined;\n      } // Check if a token/card was generated and hence the form can be submitted\n\n\n      if (me.selectedCard) {\n        if (!me.selectedCardChanged) {\n          return undefined;\n        }\n\n        me.unmountStripeElements();\n        event.preventDefault();\n\n        me._client.post(me.options.persistUrl, JSON.stringify({\n          card: me.selectedCard\n        }), function (res) {\n          var result = JSON.parse(res);\n\n          if (!result.success) {\n            return;\n          }\n\n          me.selectedCardChanged = null; // Submit the form again to finish the payment process\n\n          form.submit();\n        });\n\n        return;\n      } // Prevent the form from being submitted until a new Stripe token is generated and received\n\n\n      event.preventDefault(); // Check for invalid fields\n\n      if (Object.keys(me.invalidFields).length > 0) {\n        return;\n      } // Send the credit card information to Stripe\n\n\n      me.setSubmitButtonsLoading();\n      me.stripeClient.createPaymentMethod('card', me.stripeElements[0], {\n        billing_details: {\n          name: me.formEl('.stripe-card-holder').val()\n        }\n      }).then(function (result) {\n        if (result.error) {\n          // Only reset the submit buttons in case of an error, because otherwise the form is submitted again\n          // right aways and hence we want the buttons to stay disabled\n          me.resetSubmitButtons(); // Display the error\n\n          me.handleStripeError(result.error);\n        } else {\n          // Save the card information\n          var card = result.paymentMethod.card;\n          card.id = result.paymentMethod.id;\n          card.name = me.formEl('.stripe-card-holder').val();\n          me.setSelectedCard(card); // Save whether to save the credit card for future checkouts\n\n          var saveCard = me.formEl('.stripe-save-card').is(':checked');\n\n          try {\n            me._client.post(me.options.persistUrl, JSON.stringify({\n              card: card,\n              saveCard: saveCard\n            }), function (res) {\n              var result = JSON.parse(res);\n\n              if (!result.success) {\n                return;\n              } // Submit the form again to finish the payment process\n\n\n              form.submit();\n            });\n          } catch (err) {\n            /* eslint-disable no-debugger */\n            debugger;\n          }\n        }\n      });\n    }\n    /**\n     * Adds a subscriber to the card holder form field that is fired when its value is changed to validate the\n     * entered value.\n     *\n     * @param Object event\n     */\n\n  }, {\n    key: \"onCardHolderChange\",\n    value: function onCardHolderChange(event) {\n      var me = event.data.scope;\n      var elem = $(this); // Check if value has changed\n\n      if (elem.data('oldVal') === elem.val()) {\n        return;\n      }\n\n      elem.data('oldVal', elem.val()); // Validate the field\n\n      if (elem.val().trim().length === 0) {\n        elem.addClass('is-invalid');\n        me.markFieldInvalid('cardHolder', 'invalid_card_holder');\n      } else {\n        elem.removeClass('is-invalid');\n        me.markFieldValid('cardHolder');\n      }\n    }\n    /**\n     * Adds a change observer to the card selection field. If an existing card is selected, all form fields are hidden\n     * and the card's Stripe information is added to the form. If the 'new' option is selected, all fields made visible\n     * and the Stripe card info is removed from the form.\n     *\n     * @param Object event\n     */\n\n  }, {\n    key: \"onCardSelectionChange\",\n    value: function onCardSelectionChange(event) {\n      var me = event.data.scope;\n      var elem = $(this);\n\n      if (elem.val() === 'new') {\n        // A new, empty card was selected\n        me.setSelectedCard(null); // Make validation errors visible\n\n        me.updateValidationErrors(); // Show the save check box\n\n        me.formEl('.stripe-card-field').show();\n        me.formEl('.stripe-card-row').show();\n        me.formEl('.stripe-save-card').show().prop('checked', true);\n        return;\n      } // Find the selected card\n\n\n      for (var i = 0; i < me.options.availableCards.length; i++) {\n        var selectedCard = me.options.availableCards[i];\n\n        if (selectedCard.id !== elem.val()) {\n          continue;\n        } // Save the card\n\n\n        me.setSelectedCard(selectedCard); // Hide validation errors\n\n        me.formEl('.stripe-payment-validation-error-box').hide(); // Hide all card fields\n\n        me.formEl('.stripe-card-field').hide();\n        me.formEl('.stripe-card-row').hide();\n        me.formEl('.stripe-save-card').hide();\n        break;\n      }\n    }\n    /**\n     * Finds both submit buttons on the page and adds the 'disabled' attribute as well as the loading indicator to each\n     * of them.\n     */\n\n  }, {\n    key: \"setSubmitButtonsLoading\",\n    value: function setSubmitButtonsLoading() {\n      // Reset the button first to prevent it from being added multiple loading indicators\n      this.resetSubmitButtons();\n      $('#confirmPaymentForm button[type=\"submit\"], .confirm--actions button[form=\"confirmPaymentForm\"]').each(function () {\n        $(this).html($(this).text() + '<div class=\"loader\" role=\"status\" style=\"position: relative;top: 4px\"><span class=\"sr-only\">Loading...</span></div>').attr('disabled', 'disabled');\n      });\n    }\n    /**\n     * Finds both submit buttons on the page and resets them by removing the 'disabled' attribute as well as the\n     * loading indicator.\n     */\n\n  }, {\n    key: \"resetSubmitButtons\",\n    value: function resetSubmitButtons() {\n      $('#confirmPaymentForm button[type=\"submit\"], .confirm--actions button[form=\"confirmPaymentForm\"]').each(function () {\n        $(this).removeAttr('disabled').find('.loader').remove();\n      });\n    }\n    /**\n     * Sets the translated error message in the general error box.\n     *\n     * @param stripeError\n     */\n\n  }, {\n    key: \"handleStripeError\",\n    value: function handleStripeError(stripeError) {\n      var messageToDisplay = this.options.snippets.error[stripeError.code || ''] || stripeError.message || 'Unknown error';\n      this.formEl('.stripe-payment-error-box').show().find('.alert-content').html(\"\".concat(this.options.snippets.error, \": \").concat(messageToDisplay));\n    }\n    /**\n     * Tries to find a stripe card form for the currently active payment method. That is, if a stripe card payment\n     * method is selected, its form is returned, otherwise returns null.\n     *\n     * @return jQuery|null\n     */\n\n  }, {\n    key: \"getActiveStripeCardForm\",\n    value: function getActiveStripeCardForm() {\n      var form = $('input[id^=\"paymentMethod\"]:checked').closest('.payment-method').find('.stripe-payment-card-form');\n      return form.length > 0 ? form.first() : null;\n    }\n  }, {\n    key: \"getStripeCardForm\",\n    value: function getStripeCardForm() {\n      var form = $('input[id^=\"paymentMethod\"]').closest('.payment-method').find('.stripe-payment-card-form');\n      return form.length > 0 ? form.first() : null;\n    }\n    /**\n     * Applies a jQuery query on the DOM tree under the active stripe card form using the given selector. This method\n     * should be used when selecting any fields that are part of a Stripe card payment form. If no Stripe card form is\n     * active, an empty query result is returned.\n     *\n     * @param String selector\n     * @return jQuery\n     */\n\n  }, {\n    key: \"formEl\",\n    value: function formEl(selector) {\n      var form = this.getActiveStripeCardForm();\n      return form ? form.find(selector) : $('stripe_payment_card_not_found');\n    }\n    /**\n     * @return jQuery The main payment selection form element.\n     */\n\n  }, {\n    key: \"findForm\",\n    value: function findForm() {\n      return $('#confirmPaymentForm');\n    }\n  }]);\n\n  return StripePaymentCardSelection;\n}(src_script_plugin_system_plugin_class__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n_defineProperty(StripePaymentCardSelection, \"options\", {\n  /**\n   * @type string\n   */\n  stripePublicKey: '',\n  selectedCard: null,\n  availableCards: [],\n  snippets: {}\n});\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! /home/felix/PhpstormProjects/shopware-6/shopware-development/vendor/shopware/platform/src/Storefront/Resources/node_modules/jquery/dist/jquery.slim.js */ \"wpjq\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:////TfR\n");

/***/ }),

/***/ "I6n5":
/*!******************************************************************************************************************************************************!*\
  !*** /home/felix/PhpstormProjects/shopware-6/plugins/ShopwareStripePayment/src/Resources/storefront/sepa-selection/stripe-payment.sepa-selection.js ***!
  \******************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return StripePaymentSepaSelection; });\n/* harmony import */ var src_script_service_http_client_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/script/service/http-client.service */ \"k8s9\");\n/* harmony import */ var src_script_plugin_system_plugin_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/script/plugin-system/plugin.class */ \"FGIj\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\n\n\n\nvar StripePaymentSepaSelection =\n/*#__PURE__*/\nfunction (_Plugin) {\n  _inherits(StripePaymentSepaSelection, _Plugin);\n\n  function StripePaymentSepaSelection() {\n    _classCallCheck(this, StripePaymentSepaSelection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripePaymentSepaSelection).apply(this, arguments));\n  }\n\n  _createClass(StripePaymentSepaSelection, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      this._client = new src_script_service_http_client_service__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.accessKey, window.contextToken);\n      this.stripeElements = [];\n      this.invalidFields = [];\n      this.options = _extends(StripePaymentSepaSelection.options, this.options || {});\n      /* eslint-disable no-undef */\n\n      this.stripeClient = Stripe(this.options.stripePublicKey); // Save config\n\n      this.setSelectedSepaBankAccount(this.options.selectedSepaBankAccount); // Setup form on payment method changes\n\n      var paymentMethodElements = document.querySelectorAll('input.payment-method-input');\n      paymentMethodElements.forEach(function (element) {\n        element.addEventListener('change', function () {\n          _this.setupForm();\n        });\n      });\n      this.setupForm();\n    }\n    /**\n     * Saves the given card and removes all hidden Stripe fields from the form. If the card exists, its ID as well as\n     * its encoded data are added to the form as hidden fields.\n     *\n     * @param sepaBankAccount A Stripe card object.\n     */\n\n  }, {\n    key: \"setSelectedSepaBankAccount\",\n    value: function setSelectedSepaBankAccount(sepaBankAccount) {\n      this.selectedSepaBankAccount = sepaBankAccount;\n\n      if (this.selectedSepaBankAccount) {\n        this.selectedSepaBankAccountChanged = true;\n      }\n    }\n    /**\n     * Sets up the payment form by first unounting all Stripe elements that might be already mounted to the DOM and\n     * clearing all validation errors. Then, if a stripe card payment method is selected, mounts new Stripe Elements\n     * fields to the form and adds some observers to other fields as well as the form.\n     */\n\n  }, {\n    key: \"setupForm\",\n    value: function setupForm() {\n      // Reset form\n      this.unmountStripeElements();\n      this.invalidFields = [];\n      this.updateValidationErrors();\n\n      if (this.getActiveStripeSepaForm()) {\n        this.getStripeSepaForm().show(); // Mount Stripe form fields again to the now active form and add other observers\n\n        this.mountStripeElements();\n        this.observeForm(); // Make sure the card selection matches the internal state\n\n        if (this.selectedSepaBankAccount) {\n          this.formEl('.stripe-saved-sepa-bank-accounts').val(this.selectedSepaBankAccount.id);\n        }\n\n        this.formEl('.stripe-saved-sepa-bank-accounts').trigger('change');\n      } else {\n        this.removeFormListeners();\n        this.getStripeSepaForm().hide();\n      }\n    }\n    /**\n     * Creates the Stripe Elements fields for card number, expiry and CVC and mounts them to their resepctive nodes in\n     * the active Stripe card payment form.\n     */\n\n  }, {\n    key: \"mountStripeElements\",\n    value: function mountStripeElements() {\n      // Define a closure to create all elements using the same 'Elements' instance\n      var elements = this.stripeClient.elements();\n      var me = this;\n\n      var createAndMountStripeElement = function createAndMountStripeElement(type, mountSelector) {\n        // Create the element and add the change listener\n        var options = {};\n\n        if (type === 'iban') {\n          options = {\n            supportedCountries: ['SEPA'],\n            placeholderCountry: me.options.countryCode\n          };\n        }\n\n        var element = elements.create(type, options);\n        element.on('change', function (event) {\n          if (event.error && event.error.type === 'validation_error') {\n            me.markFieldInvalid(type, event.error.code, event.error.message);\n            $(mountSelector).addClass('is-invalid');\n          } else {\n            me.markFieldValid(type);\n            $(mountSelector).removeClass('is-invalid');\n          }\n        }); // Mount it to the DOM\n\n        var mountElement = me.formEl(mountSelector).get(0);\n        element.mount(mountElement);\n        return element;\n      }; // Create all elements\n\n\n      this.stripeElements = [createAndMountStripeElement('iban', '.stripe-element-sepa-iban')];\n    }\n    /**\n     * Unmounts all existing Stripe elements from the Stripe card payment form they are currently mounted to.\n     */\n\n  }, {\n    key: \"unmountStripeElements\",\n    value: function unmountStripeElements() {\n      this.stripeElements.forEach(function (element) {\n        return element.unmount();\n      });\n      this.stripeElements = [];\n    }\n    /**\n     * Checks the list of invalid fields for any entries and, if found, joins them to an error message, which is then\n     * displayed in the error box. If no invalid fields are found, the error box is hidden.\n     */\n\n  }, {\n    key: \"updateValidationErrors\",\n    value: function updateValidationErrors() {\n      var _this2 = this;\n\n      var errorBox = this.formEl('.stripe-payment-validation-error-box');\n      var boxContent = errorBox.find('.alert-content');\n      boxContent.empty();\n\n      if (Object.keys(this.invalidFields).length > 0) {\n        // Update the error box message and make it visible\n        var listEl = $('<ul></ul>').addClass('alert-list').appendTo(boxContent);\n        Object.keys(this.invalidFields).forEach(function (key) {\n          $('<li></li>').text(_this2.invalidFields[key]).appendTo(listEl);\n        });\n        errorBox.show();\n      } else {\n        errorBox.hide();\n      }\n    }\n    /**\n     * Adds change listeners to the card selection and card holder field as well as a submission listener on the main\n     * payment form.\n     */\n\n  }, {\n    key: \"observeForm\",\n    value: function observeForm() {\n      // Add listeners\n      this.findForm().on('submit', {\n        scope: this\n      }, this.onFormSubmission);\n      this.formEl('.stripe-saved-sepa-bank-accounts').on('change', {\n        scope: this\n      }, this.onSepaBankAccountSelectionChange);\n      var me = this;\n      this.formEl('input[class^=\"stripe-sepa-\"]').each(function () {\n        // Save the current value and add listener\n        var elem = $(this);\n        elem.data('oldVal', elem.val());\n        elem.on('propertychange keyup input paste', {\n          scope: me\n        }, me.onFieldChange);\n      });\n    }\n  }, {\n    key: \"removeFormListeners\",\n    value: function removeFormListeners() {\n      this.findForm().off('submit', this.onFormSubmission);\n      this.formEl('.stripe-saved-sepa-bank-accounts').off('change', this.onSepaBankAccountSelectionChange);\n      var me = this;\n      this.formEl('input[class^=\"stripe-sepa-\"]').each(function () {\n        // Save the current value and add listener\n        var elem = $(this);\n        elem.off('propertychange keyup input paste', me.onFieldChange);\n      });\n    }\n    /**\n     * Validates the field value to not be empty. If the validation failes, the field is marked invalid.\n     *\n     * @param Event event\n     * @param boolean|undefined force\n     */\n\n  }, {\n    key: \"onFieldChange\",\n    value: function onFieldChange(event, force) {\n      var me = event.data.scope;\n      var elem = $(this);\n      var name = elem.attr('name'); // Check if value has changed, if 'force' is not set\n\n      if (!force && elem.data('oldVal') === elem.val()) {\n        return;\n      }\n\n      elem.data('oldVal', elem.val()); // Validate the field\n\n      if (elem.val().trim().length === 0) {\n        elem.addClass('is-invalid');\n        me.markFieldInvalid(name, 'invalid_' + name);\n      } else {\n        elem.removeClass('is-invalid');\n        me.markFieldValid(name);\n      }\n    }\n    /**\n     * Removes all validation errors for the field with the given 'fieldId' and triggers an update of the displayed\n     * validation errors.\n     *\n     * @param String fieldId\n     */\n\n  }, {\n    key: \"markFieldValid\",\n    value: function markFieldValid(fieldId) {\n      delete this.invalidFields[fieldId];\n      this.updateValidationErrors();\n    }\n    /**\n     * Determines the error message based on the given 'errorCode' and 'message' and triggers\n     * an update of the displayed validation errors.\n     *\n     * @param fieldId\n     * @param errorCode (optional) The code used to find a localised error message.\n     * @param message (optioanl) The fallback error message used in case no 'errorCode' is provided or no respective, localised description exists.\n     */\n\n  }, {\n    key: \"markFieldInvalid\",\n    value: function markFieldInvalid(fieldId, errorCode, message) {\n      this.invalidFields[fieldId] = this.options.snippets.errors[errorCode || ''] || message || 'Unknown error';\n      this.updateValidationErrors();\n    }\n    /**\n     * First validates the form and payment state and, if the main form can be submitted, does nothing further.\n     * If however the main form cannot be submitted, because no card is selected (or no token was created), a new Stripe\n     * card and token are generated using the entered card data and saved in the form, before the submission is\n     * triggered again.\n     *\n     * @param event\n     */\n\n  }, {\n    key: \"onFormSubmission\",\n    value: function onFormSubmission(event) {\n      var me = event.data.scope;\n      var form = $(this); // Not the currently selected payment method\n\n      if (!me.getActiveStripeSepaForm()) {\n        return undefined;\n      } // Check if a token/card was generated and hence the form can be submitted\n\n\n      if (me.selectedSepaBankAccount) {\n        if (!me.selectedSepaBankAccountChanged) {\n          return undefined;\n        }\n\n        me.unmountStripeElements();\n        event.preventDefault();\n\n        me._client.post(me.options.persistUrl, JSON.stringify({\n          selectedSepaBankAccount: me.selectedSepaBankAccount\n        }), function (res) {\n          var result = JSON.parse(res);\n\n          if (!result.success) {\n            return;\n          }\n\n          me.selectedSepaBankAccountChanged = null; // Submit the form again to finish the payment process\n\n          form.submit();\n        });\n\n        return;\n      } // Prevent the form from being submitted until a new Stripe token is generated and received\n\n\n      event.preventDefault(); // Check for invalid fields\n\n      if (Object.keys(me.invalidFields).length > 0) {\n        return;\n      } // Send the credit card information to Stripe\n\n\n      me.setSubmitButtonsLoading();\n      me.stripeClient.createPaymentMethod('sepa_debit', me.stripeElements[0], {\n        billing_details: {\n          name: me.formEl('input.stripe-sepa-account-owner').val(),\n          email: me.formEl('input.stripe-sepa-email').val(),\n          address: {\n            line1: me.formEl('input.stripe-sepa-street').val(),\n            city: me.formEl('input.stripe-sepa-zip-code').val(),\n            postal_code: me.formEl('input.stripe-sepa-city').val(),\n            country: me.formEl('select.stripe-sepa-country').val()\n          }\n        }\n      }).then(function (result) {\n        if (result.error) {\n          // Only reset the submit buttons in case of an error, because otherwise the form is submitted again\n          // right aways and hence we want the buttons to stay disabled\n          me.resetSubmitButtons(); // Display the error\n\n          me.handleStripeError(result.error);\n        } else {\n          // Save the card information\n          var sepaBankAccount = result.paymentMethod.sepa_debit;\n          sepaBankAccount.id = result.paymentMethod.id;\n          sepaBankAccount.name = me.formEl('.stripe-sepa-account-owner').val();\n          me.setSelectedSepaBankAccount(sepaBankAccount);\n          var saveSepaBankAccount = me.formEl('.stripe-save-sepa-bank-account').is(':checked');\n\n          try {\n            me._client.post(me.options.persistUrl, JSON.stringify({\n              selectedSepaBankAccount: sepaBankAccount,\n              saveSepaBankAccount: saveSepaBankAccount\n            }), function (res) {\n              var result = JSON.parse(res);\n\n              if (!result.success) {\n                return;\n              } // Submit the form again to finish the payment process\n\n\n              form.submit();\n            });\n          } catch (err) {\n            /* eslint-disable no-debugger */\n            debugger;\n          }\n        }\n      });\n    }\n    /**\n     * Adds a change observer to the card selection field. If an existing card is selected, all form fields are hidden\n     * and the card's Stripe information is added to the form. If the 'new' option is selected, all fields made visible\n     * and the Stripe card info is removed from the form.\n     *\n     * @param Object event\n     */\n\n  }, {\n    key: \"onSepaBankAccountSelectionChange\",\n    value: function onSepaBankAccountSelectionChange(event) {\n      var me = event.data.scope;\n      var elem = $(this);\n\n      if (elem.val() === 'new') {\n        // A new, empty card was selected\n        me.setSelectedSepaBankAccount(null); // Make validation errors visible\n\n        me.updateValidationErrors(); // Show the save check box\n\n        me.formEl('.stripe-sepa-field').show();\n        me.formEl('.stripe-sepa-row').show();\n        me.formEl('.stripe-save-sepa-bank-account').show().prop('checked', true);\n        return;\n      } // Find the selected card\n\n\n      for (var i = 0; i < me.options.availableSepaBankAccounts.length; i++) {\n        var selectedSepaBankAccount = me.options.availableSepaBankAccounts[i];\n\n        if (selectedSepaBankAccount.id !== elem.val()) {\n          continue;\n        } // Save the card\n\n\n        if (!me.selectedSepaBankAccount || me.selectedSepaBankAccount.id !== selectedSepaBankAccount.id) {\n          me.setSelectedSepaBankAccount(selectedSepaBankAccount);\n        } // Hide validation errors\n\n\n        me.formEl('.stripe-payment-validation-error-box').hide(); // Hide all sepa fields\n\n        me.formEl('.stripe-sepa-field').hide();\n        me.formEl('.stripe-sepa-row').hide();\n        me.formEl('.stripe-save-bank-account').hide();\n        break;\n      }\n    }\n    /**\n     * Finds both submit buttons on the page and adds the 'disabled' attribute as well as the loading indicator to each\n     * of them.\n     */\n\n  }, {\n    key: \"setSubmitButtonsLoading\",\n    value: function setSubmitButtonsLoading() {\n      // Reset the button first to prevent it from being added multiple loading indicators\n      this.resetSubmitButtons();\n      $('#confirmPaymentForm button[type=\"submit\"], .confirm--actions button[form=\"confirmPaymentForm\"]').each(function () {\n        $(this).html($(this).text() + '<div class=\"loader\" role=\"status\" style=\"position: relative;top: 4px\"><span class=\"sr-only\">Loading...</span></div>').attr('disabled', 'disabled');\n      });\n    }\n    /**\n     * Finds both submit buttons on the page and resets them by removing the 'disabled' attribute as well as the\n     * loading indicator.\n     */\n\n  }, {\n    key: \"resetSubmitButtons\",\n    value: function resetSubmitButtons() {\n      $('#confirmPaymentForm button[type=\"submit\"], .confirm--actions button[form=\"confirmPaymentForm\"]').each(function () {\n        $(this).removeAttr('disabled').find('.loader').remove();\n      });\n    }\n    /**\n     * Sets the translated error message in the general error box.\n     *\n     * @param stripeError\n     */\n\n  }, {\n    key: \"handleStripeError\",\n    value: function handleStripeError(stripeError) {\n      var messageToDisplay = this.options.snippets.error[stripeError.code || ''] || stripeError.message || 'Unknown error';\n      this.formEl('.stripe-payment-error-box').show().find('.alert-content').html(\"\".concat(this.options.snippets.error, \": \").concat(messageToDisplay));\n    }\n    /**\n     * Tries to find a stripe card form for the currently active payment method. That is, if a stripe card payment\n     * method is selected, its form is returned, otherwise returns null.\n     *\n     * @return jQuery|null\n     */\n\n  }, {\n    key: \"getActiveStripeSepaForm\",\n    value: function getActiveStripeSepaForm() {\n      var form = $('input[id^=\"paymentMethod\"]:checked').closest('.payment-method').find('.stripe-payment-sepa-form');\n      return form.length > 0 ? form.first() : null;\n    }\n  }, {\n    key: \"getStripeSepaForm\",\n    value: function getStripeSepaForm() {\n      var form = $('input[id^=\"paymentMethod\"]').closest('.payment-method').find('.stripe-payment-sepa-form');\n      return form.length > 0 ? form.first() : null;\n    }\n    /**\n     * Applies a jQuery query on the DOM tree under the active stripe card form using the given selector. This method\n     * should be used when selecting any fields that are part of a Stripe card payment form. If no Stripe card form is\n     * active, an empty query result is returned.\n     *\n     * @param String selector\n     * @return jQuery\n     */\n\n  }, {\n    key: \"formEl\",\n    value: function formEl(selector) {\n      var form = this.getActiveStripeSepaForm();\n      return form ? form.find(selector) : $('stripe_payment_bank_account_not_found');\n    }\n    /**\n     * @return jQuery The main payment selection form element.\n     */\n\n  }, {\n    key: \"findForm\",\n    value: function findForm() {\n      return $('#confirmPaymentForm');\n    }\n  }]);\n\n  return StripePaymentSepaSelection;\n}(src_script_plugin_system_plugin_class__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n_defineProperty(StripePaymentSepaSelection, \"options\", {\n  /**\n   * @type string\n   */\n  stripePublicKey: '',\n  selectedSepaBankAccount: null,\n  availableSepaBankAccounts: [],\n  snippets: {}\n});\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! /home/felix/PhpstormProjects/shopware-6/shopware-development/vendor/shopware/platform/src/Storefront/Resources/node_modules/jquery/dist/jquery.slim.js */ \"wpjq\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///I6n5\n");

/***/ }),

/***/ "a+Fl":
/*!**************************************************************************************************************************************************************************!*\
  !*** /home/felix/PhpstormProjects/shopware-6/plugins/ShopwareStripePayment/src/Resources/storefront/digital-wallet-selection/stripe-payment.digital-wallet-selection.js ***!
  \**************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return StripePaymentDigitalWalletSelection; });\n/* harmony import */ var src_script_service_http_client_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/script/service/http-client.service */ \"k8s9\");\n/* harmony import */ var src_script_plugin_system_plugin_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/script/plugin-system/plugin.class */ \"FGIj\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\n\n\n\nvar StripePaymentDigitalWalletSelection =\n/*#__PURE__*/\nfunction (_Plugin) {\n  _inherits(StripePaymentDigitalWalletSelection, _Plugin);\n\n  function StripePaymentDigitalWalletSelection() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StripePaymentDigitalWalletSelection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StripePaymentDigitalWalletSelection)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"paymentApiAvailable\", false);\n\n    return _this;\n  }\n\n  _createClass(StripePaymentDigitalWalletSelection, [{\n    key: \"init\",\n    value: function init() {\n      this._client = new src_script_service_http_client_service__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.accessKey, window.contextToken);\n      this.options = _extends(StripePaymentDigitalWalletSelection.options, this.options || {});\n      /* eslint-disable no-undef */\n\n      this.stripeClient = Stripe(this.options.stripePublicKey);\n      this.paymentDisplayItems = this.options.lineItems.map(function (item) {\n        return {\n          label: \"\".concat(item.quantity, \"x \").concat(item.label),\n          amount: Math.round(item.price.totalPrice * 100)\n        };\n      });\n\n      if (this.options.shippingCost) {\n        this.paymentDisplayItems.push({\n          label: this.options.snippets.shipping_cost,\n          amount: Math.round(this.options.shippingCost * 100)\n        });\n      }\n\n      this.findForm().on('submit', this.onFormSubmission.bind(this));\n      this.createPaymentRequest(this.options.countryCode, this.options.currencyCode, this.options.amount);\n    }\n  }, {\n    key: \"createPaymentRequest\",\n    value: function createPaymentRequest(countryCode, currencyCode, amount) {\n      var _this2 = this;\n\n      this.paymentRequest = this.stripeClient.paymentRequest({\n        country: countryCode.toUpperCase(),\n        currency: currencyCode.toLowerCase(),\n        total: {\n          label: this.options.snippets.total,\n          amount: Math.round(amount * 100)\n        },\n        displayItems: this.paymentDisplayItems\n      }); // Add a listener for once the payment is created. This happens once the user selects \"pay\" in his browser\n      // specific payment popup\n\n      this.paymentRequest.on('paymentmethod', function (paymentResponse) {\n        _this2.paymentMethodId = paymentResponse.paymentMethod.id; // Complete the browser's payment flow\n\n        paymentResponse.complete('success'); // Add the created Stripe token to the form and submit it\n\n        var form = _this2.findForm();\n\n        $('input[name=\"stripeDigitalWalletPaymentMethodId\"]').remove();\n        $('<input type=\"hidden\" name=\"stripeDigitalWalletPaymentMethodId\" />').val(_this2.paymentMethodId).appendTo(form);\n        form.submit();\n      }); // Add listener for cancelled payment flow\n\n      this.paymentRequest.on('cancel', function () {\n        _this2.paymentMethodId = null;\n\n        _this2.handleStripeError(_this2.options.snippets.errors.payment_cancelled);\n\n        _this2.resetSubmitButton();\n      }); // Check for availability of the payment api\n\n      this.paymentRequest.canMakePayment().then(function (result) {\n        _this2.paymentApiAvailable = !!result;\n\n        if (_this2.paymentApiAvailable) {\n          return;\n        }\n\n        if (!_this2.isSecureConnection()) {\n          _this2.handleStripeError(_this2.options.snippets.errors.connection_not_secure);\n\n          return;\n        }\n\n        _this2.handleStripeError(_this2.options.snippets.errors.payment_api_unavailable);\n      });\n    }\n  }, {\n    key: \"isSecureConnection\",\n    value: function isSecureConnection() {\n      return window.location.protocol === 'https:';\n    }\n    /**\n     * First validates the form and payment state and, if the main form can be submitted, does nothing further.\n     * If however the main form cannot be submitted, because no card is selected (or no token was created), a new Stripe\n     * card and token are generated using the entered card data and saved in the form, before the submission is\n     * triggered again.\n     *\n     * @param event\n     */\n\n  }, {\n    key: \"onFormSubmission\",\n    value: function onFormSubmission(event) {\n      if ($('input#tos').length === 1 && !$('input#tos').is(':checked')) {\n        return undefined;\n      } // Check if a Stripe payment method was generated and hence the form can be submitted\n\n\n      if (this.paymentMethodId) {\n        return undefined;\n      } // Prevent the form from being submitted until a new Stripe payment method is generated and received\n\n\n      event.preventDefault(); // We have to manually check whether this site is served via HTTPS before checking the digital wallet payments availability\n      // using Stripe.js. Even though Stripe.js checks the used protocol and declines the payment if not served via\n      // HTTPS, only a generic 'not available' error message is returned and the HTTPS warning is logged to the\n      // console. We however want to show a specific error message that informs about the lack of security.\n\n      if (!this.isSecureConnection()) {\n        this.resetSubmitButton();\n        this.handleStripeError(this.options.snippets.errors.connection_not_secure);\n        return undefined;\n      } // Check for general availability of the digital wallet payments\n\n\n      if (!this.paymentApiAvailable) {\n        this.resetSubmitButton();\n        this.handleStripeError(this.options.snippets.errors.payment_api_unavailable);\n        return undefined;\n      }\n\n      $('#stripe-payment-checkout-error-box').hide();\n      this.setSubmitButtonLoading(); // Process the payment\n\n      this.paymentRequest.show();\n    }\n    /**\n     * Finds the submit button on the page and adds the 'disabled' attribute as well as a loading indicator.\n     */\n\n  }, {\n    key: \"setSubmitButtonLoading\",\n    value: function setSubmitButtonLoading() {\n      var submitButton = $('#confirmFormSubmit');\n      submitButton.html('<div class=\"loader\" role=\"status\" style=\"position: relative;top: 4px\"><span class=\"sr-only\">Loading...</span></div>' + submitButton.html()).attr('disabled', 'disabled');\n    }\n    /**\n     * Finds the submit button on the page and resets it by removing the 'disabled' attribute as well as the\n     * loading indicator.\n     */\n\n  }, {\n    key: \"resetSubmitButton\",\n    value: function resetSubmitButton() {\n      $('#confirmFormSubmit').removeAttr('disabled').find('.loader').remove();\n    }\n    /**\n     * Sets the given message in the general error box and scrolls the page to make it visible.\n     *\n     * @param {String} message\n     */\n\n  }, {\n    key: \"handleStripeError\",\n    value: function handleStripeError(message) {\n      $('#stripe-payment-checkout-error-box').show().find('.alert-content').html(\"\".concat(this.options.snippets.error, \": \").concat(message));\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    }\n    /**\n     * @return jQuery The main payment selection form element.\n     */\n\n  }, {\n    key: \"findForm\",\n    value: function findForm() {\n      return $('#confirmOrderForm');\n    }\n  }]);\n\n  return StripePaymentDigitalWalletSelection;\n}(src_script_plugin_system_plugin_class__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n_defineProperty(StripePaymentDigitalWalletSelection, \"options\", {\n  /**\n   * @type string\n   */\n  stripePublicKey: '',\n  lineItems: [],\n  countryCode: 'DE',\n  currencyCode: 'EUR',\n  snippets: {}\n});\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! /home/felix/PhpstormProjects/shopware-6/shopware-development/vendor/shopware/platform/src/Storefront/Resources/node_modules/jquery/dist/jquery.slim.js */ \"wpjq\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///a+Fl\n");

/***/ }),

/***/ "qW9D":
/*!**************************************************************************************************************!*\
  !*** /home/felix/PhpstormProjects/shopware-6/plugins/ShopwareStripePayment/src/Resources/storefront/main.js ***!
  \**************************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _card_selection_stripe_payment_card_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./card-selection/stripe-payment.card-selection */ \"/TfR\");\n/* harmony import */ var _sepa_selection_stripe_payment_sepa_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sepa-selection/stripe-payment.sepa-selection */ \"I6n5\");\n/* harmony import */ var _digital_wallet_selection_stripe_payment_digital_wallet_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./digital-wallet-selection/stripe-payment.digital-wallet-selection */ \"a+Fl\");\n// Import all necessary Storefront plugins and scss files\n\n\n // Register them via the existing PluginManager\n\nvar PluginManager = window.PluginManager;\nPluginManager.register('StripePaymentCardSelection', _card_selection_stripe_payment_card_selection__WEBPACK_IMPORTED_MODULE_0__[\"default\"], '[data-stripe-payment-card-selection]');\nPluginManager.register('StripePaymentSepaSelection', _sepa_selection_stripe_payment_sepa_selection__WEBPACK_IMPORTED_MODULE_1__[\"default\"], '[data-stripe-payment-sepa-selection]');\nPluginManager.register('StripePaymentDigitalWalletSelection', _digital_wallet_selection_stripe_payment_digital_wallet_selection__WEBPACK_IMPORTED_MODULE_2__[\"default\"], '[data-stripe-payment-digital-wallet-selection]'); //Necessary for the webpack hot module reloading server\n\nif (false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicVc5RC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vaG9tZS9mZWxpeC9QaHBzdG9ybVByb2plY3RzL3Nob3B3YXJlLTYvcGx1Z2lucy9TaG9wd2FyZVN0cmlwZVBheW1lbnQvc3JjL1Jlc291cmNlcy9zdG9yZWZyb250L21haW4uanM/MjkzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnQgYWxsIG5lY2Vzc2FyeSBTdG9yZWZyb250IHBsdWdpbnMgYW5kIHNjc3MgZmlsZXNcbmltcG9ydCBTdHJpcGVQYXltZW50Q2FyZFNlbGVjdGlvbiBmcm9tICcuL2NhcmQtc2VsZWN0aW9uL3N0cmlwZS1wYXltZW50LmNhcmQtc2VsZWN0aW9uJztcbmltcG9ydCBTdHJpcGVQYXltZW50U2VwYVNlbGVjdGlvbiBmcm9tICcuL3NlcGEtc2VsZWN0aW9uL3N0cmlwZS1wYXltZW50LnNlcGEtc2VsZWN0aW9uJztcbmltcG9ydCBTdHJpcGVQYXltZW50RGlnaXRhbFdhbGxldFNlbGVjdGlvbiBmcm9tICcuL2RpZ2l0YWwtd2FsbGV0LXNlbGVjdGlvbi9zdHJpcGUtcGF5bWVudC5kaWdpdGFsLXdhbGxldC1zZWxlY3Rpb24nO1xuXG4vLyBSZWdpc3RlciB0aGVtIHZpYSB0aGUgZXhpc3RpbmcgUGx1Z2luTWFuYWdlclxuY29uc3QgUGx1Z2luTWFuYWdlciA9IHdpbmRvdy5QbHVnaW5NYW5hZ2VyO1xuUGx1Z2luTWFuYWdlci5yZWdpc3RlcignU3RyaXBlUGF5bWVudENhcmRTZWxlY3Rpb24nLCBTdHJpcGVQYXltZW50Q2FyZFNlbGVjdGlvbiwgJ1tkYXRhLXN0cmlwZS1wYXltZW50LWNhcmQtc2VsZWN0aW9uXScpO1xuUGx1Z2luTWFuYWdlci5yZWdpc3RlcignU3RyaXBlUGF5bWVudFNlcGFTZWxlY3Rpb24nLCBTdHJpcGVQYXltZW50U2VwYVNlbGVjdGlvbiwgJ1tkYXRhLXN0cmlwZS1wYXltZW50LXNlcGEtc2VsZWN0aW9uXScpO1xuUGx1Z2luTWFuYWdlci5yZWdpc3RlcignU3RyaXBlUGF5bWVudERpZ2l0YWxXYWxsZXRTZWxlY3Rpb24nLCBTdHJpcGVQYXltZW50RGlnaXRhbFdhbGxldFNlbGVjdGlvbiwgJ1tkYXRhLXN0cmlwZS1wYXltZW50LWRpZ2l0YWwtd2FsbGV0LXNlbGVjdGlvbl0nKTtcblxuXG4vL05lY2Vzc2FyeSBmb3IgdGhlIHdlYnBhY2sgaG90IG1vZHVsZSByZWxvYWRpbmcgc2VydmVyXG5pZiAobW9kdWxlLmhvdCkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///qW9D\n");

/***/ })

},[["qW9D","runtime","vendor-node","vendor-shared"]]]);